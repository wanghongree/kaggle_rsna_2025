
Update @01_data_summary.py
Complete code in # %% task 1: Create dicom image level data table
1. Read the tags of each dicom file in series/ folder, including 
 - 'BitsAllocated', 'BitsStored', 'Columns', 'FrameOfReferenceUID', 'HighBit', 'ImageOrientationPatient', 'ImagePositionPatient', 'InstanceNumber', 'Modality', 'PatientID', 'PhotometricInterpretation', 'PixelRepresentation', 'PixelSpacing', 'PlanarConfiguration', 'RescaleIntercept', 'RescaleSlope', 'RescaleType', 'Rows', 'SOPClassUID', 'SOPInstanceUID', 'SamplesPerPixel', 'SliceThickness', 'SpacingBetweenSlices', 'StudyInstanceUID', 'TransferSyntaxUID'. Read pixel 
 - pixel data's shape; be careful the data is very large (>300G), so don't store the pixel data value for all DICOM in the RAM.
2. Add the information from train.csv by joining; also including path of the dicom.
3. Add the information from train_localizers.csv by left joining. also including path of the dicom.
4. create a dataframe, each row is a dicom image, the dataframe has columns SeriesInstanceUID, SOPInstanceUID, and the tags and information collected.
5. Look through the files in segmentations, create a dataframe on series level, inluding tags for .nii files and its corresponding _cowseg.nii files. inlude their data shapes and path. Join this dataframe with the dicom instance level one.
6. save the dataframe into data/processed/. So that in the future I read directly from this data for further analysis.
7. create a documentaion called CLAUDE.md in the data/processed/, which should describe 
 - a brief description of what's the data about, and what information are included.
 - the format of the data, including columns, data types of each columns, number of rows, description for some columns if necessary.

be careful of tags with missing values.


Read the file @modules/dicom_processing.py, @modules/segmentation_processing.py, @scripts/01_create_meta_data.py and its test file @tests/test_01_create_meta_data.py and understand the main logic. There are problems for the following series
1.2.826.0.1.3680043.8.498.10063454172499468887877935052136698373
1.2.826.0.1.3680043.8.498.22157965342587174310173115980837533982
1.2.826.0.1.3680043.8.498.24059937312846701557229931292132131003
1.2.826.0.1.3680043.8.498.75712554178574230484227682423862727306
1.2.826.0.1.3680043.8.498.82768897201281605198635077495114055892
Could you use them to debug? 


As there are many dicom series in series/ folder, it takes a long time to process. It's risky to save all result in the end. 
Now please think deeply and modify the logic. Process and saved data series by series. 
 - There should be a function, when given a SeriesInstanceUID, it collect all the relavent data and return the data for this series. Then another function add the data into the datafile. In this way, the series successfully processed won't be lost.
 - The data/train.csv file contains all the SeriesInstanceUID needed to be processed. At the start of the script, it should check and skip successfully processed data.
 - Test the script using the following SeriesInstanceUID
1.2.826.0.1.3680043.8.498.10063454172499468887877935052136698373
1.2.826.0.1.3680043.8.498.22157965342587174310173115980837533982
1.2.826.0.1.3680043.8.498.24059937312846701557229931292132131003
1.2.826.0.1.3680043.8.498.75712554178574230484227682423862727306
1.2.826.0.1.3680043.8.498.82768897201281605198635077495114055892

Please update the code in @modules/dicom_processing.py, @modules/segmentation_processing.py, @scripts/01_create_meta_data.py.




Think deeply about the code. Let's make the architect simple and code eadable. 

1. merge @modules/dicom_processing.py and @modules/segmentation_processing.py into one file.  
2. add a CLAUDE file in scripts and add a summary about what does @scripts/01_create_meta_data.py do. 
3. add the required package into requirements.txt
4. Create a test in tests/ which should collect data for the following series
1.2.826.0.1.3680043.8.498.24059937312846701557229931292132131003
1.2.826.0.1.3680043.8.498.75712554178574230484227682423862727306
1.2.826.0.1.3680043.8.498.82768897201281605198635077495114055892
1.2.826.0.1.3680043.8.498.10004044428023505108375152878107656647
1.2.826.0.1.3680043.8.498.10035643165968342618460849823699311381


